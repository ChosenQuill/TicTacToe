{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","react_default","a","createElement","className","id","number","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","info","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","Math","floor","win","document","getElementById","style","background","step","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","src_Board","handleClick","lines","_lines$i","slicedToArray","b","c","ReactDOM","render","src_Game","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.46bf75f9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" id = {props.number} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                number = {\"sq\"+i}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"board-row\">\n                    {this.renderSquare(0)}\n                    {this.renderSquare(1)}\n                    {this.renderSquare(2)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(3)}\n                    {this.renderSquare(4)}\n                    {this.renderSquare(5)}\n                </div>\n                <div className=\"board-row\">\n                    {this.renderSquare(6)}\n                    {this.renderSquare(7)}\n                    {this.renderSquare(8)}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null),\n                    info: Array(9).fill(null),\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true\n        };\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    info: \"Player: \" + squares[i] + \" | Pos: (\" + (Math.floor(i%3)+1) + \", \" +(Math.floor(i/3)+1) + \")\",\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n        var win = calculateWinner(squares);\n        if(win){\n            //log(win[0]);\n            //log(this.state.history[this.state.stepNumber].squares[win[0]]);\n            for(let i = 0; i < 3; i++)\n            document.getElementById(\"sq\" + win[i]).style.background = \"#ccc\";\n        }\n    }\n\n    jumpTo(step) {\n        if(this.state.stepNumber != step){\n            for(let i = 0; i < 9; i++)\n                document.getElementById(\"sq\" + i).style.background = null;\n        }\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button> {step.info}\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + current.squares[winner[0]];\n        } else if (this.state.stepNumber == 9){\n            status = \"We Have A Tie!\"\n        }\n        else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateTie(squares){\n\n}\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [a, b, c];\n        }\n    }\n    return null;\n}\n\nfunction log(text){\n    document.getElementById(\"log\").innerText += \"\\n\" + text;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}