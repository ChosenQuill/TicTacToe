{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","react_default","a","createElement","className","id","number","onClick","value","Board","i","_this","this","squares","key","table","x","mini","y","push","renderSquare","React","Component","Game","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","history","Array","fill","info","usedPos","stepNumber","xIsNext","width","height","onMobile","flipped","updateWindowDimensions","bind","assertThisInitialized","slice","length","calculateWinner","setState","concat","Math","floor","win","document","getElementById","style","background","fontWeight","step","status","_this3","current","winner","moves","map","move","desc","jumpTo","src_Board","handleClick","element","getElementsByTagName","flexDirection","addEventListener","removeEventListener","mobile","innerWidth","innerHeight","lines","_lines$i","slicedToArray","b","c","ReactDOM","render","src_Game","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e18b8855.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" id = {props.number} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                number = {\"sq\"+i}\n                key = {i}\n            />\n        );\n    }\n\n    render() {\n        let table = [];\n        for(let x = 0; x < 3; x++){\n            let mini = [];\n            for(let y = 0; y < 3; y++)\n                mini.push(this.renderSquare((x*3)+y));\n            table.push(<div className=\"board-row\" key = {x}> {mini} </div>)\n        }\n        return (\n            <div>\n                {table}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [\n                {\n                    squares: Array(9).fill(null),\n                    info: Array(9).fill(null),\n                    usedPos: null\n                }\n            ],\n            stepNumber: 0,\n            xIsNext: true,\n            width: 0,\n            height: 0,\n            onMobile: false,\n            flipped: false\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    info: \"Player: \" + squares[i] + \" | Pos: (\" + (Math.floor(i%3)+1) + \", \" +(3-Math.floor(i/3)) + \")\",\n                    usedPos: i,\n                }\n            ]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext\n        });\n        var win = calculateWinner(squares);\n        if(win){\n            for(let i = 0; i < 3; i++)\n                document.getElementById(\"sq\" + win[i]).style.background = \"#ccc\";\n        }\n        for (let i = 0; i < 9; i++) {\n            document.getElementById(\"sq\" + i).style.fontWeight = null;\n        }\n        document.getElementById(\"sq\" + i).style.fontWeight = \"bold\";\n\n    }\n\n    jumpTo(step) {\n        if(this.state.stepNumber !== step) {\n            const history = this.state.history[step];\n            for (let i = 0; i < 9; i++) {\n                document.getElementById(\"sq\" + i).style.background = null;\n                document.getElementById(\"sq\" + i).style.fontWeight = null;\n            }\n            this.setState({\n                stepNumber: step,\n                xIsNext: (step % 2) === 0\n            });\n            if(step !== 0)\n                document.getElementById(\"sq\" + history.usedPos).style.fontWeight = \"bold\";\n            var win = calculateWinner(history.squares)\n            if (win){\n                for(let i = 0; i < 3; i++)\n                    document.getElementById(\"sq\" + win[i]).style.background = \"#ccc\";\n            }\n        }\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const desc = move ?\n                'Go to move #' + move :\n                'Go to game start';\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}>{desc}</button> {step.info}\n                </li>\n            );\n        });\n\n        let status;\n        if (winner) {\n            status = \"Winner: \" + current.squares[winner[0]];\n        } else if (this.state.stepNumber === 9){\n            status = \"We Have A Tie!\"\n        }\n        else {\n            status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"status\">{status}</div>\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={i => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <ol>{moves}</ol>\n                </div>\n                <button onClick={()=>{\n                    this.setState({flipped: !this.state.flipped});\n                    let element = document.getElementsByTagName(\"ol\")[0];\n                    if(this.state.flipped)\n                        element.style.flexDirection = \"column-reverse\";\n                    else\n                        element.style.flexDirection = \"column\";\n                }}>Reverse Order</button>\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        let mobile = window.innerWidth < 500;\n        this.setState({ width: window.innerWidth, height: window.innerHeight, onMobile: mobile });\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return [a, b, c];\n        }\n    }\n    return null;\n}\n\nfunction log(text){\n    document.getElementById(\"log\").innerText += \"\\n\" + text;\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}